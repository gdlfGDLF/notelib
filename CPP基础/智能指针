### 智能指针

RALL 资源获取即初始化

### 1.uniqueptr 独占指针

**特性**：

- 独占所有权，不能复制，只能移动。
- 适用于需要明确表示所有权的场景。

**常用方法**：

- `std::move` 转移所有权。
- `.get()` 获取原始指针。
- `.release()` 放弃所有权，不释放内存。
- `.reset()` 释放当前资源并绑定新资源。

初始化

```cpp
std::unique_ptr<PtrTest>p1(new PtrTest);
auto p2 = std::make_unique<PtrTest>();
std::unique_ptr<int[]> array1(new int[5]);
auto p3 = std::make_unique<int[]>(5);
```

两种初始化的区别：

### 

### 2.Shared 共享指针

**特性**：

- 共享所有权，多次复制会增加引用计数。
- 最后一个引用被销毁时，资源才会释放。
- 适用于多个对象共享相同资源的场景。

**常用方法**：

- `.use_count()` 查看当前引用计数。
- `.reset()` 释放当前持有的资源。
- `.get()` 获取原始指针。

```cpp
std::shared_ptr<PtrTest>ps1(new PtrTest);
auto ps2 = std::make_shared<PtrTest>;
```

### 3.weak_ptr 弱引用指针

**特性**：

- 辅助 `std::shared_ptr`，弱引用，不影响引用计数。
- 防止循环引用（两个`std::shared_ptr`相互引用无法释放）。
- 必须通过 `std::weak_ptr.lock()` 转换为 `std::shared_ptr` 访问资源。

```cpp
struct Node {
    std::shared_ptr<Node> next;
    std::weak_ptr<Node> prev; // 使用weak_ptr避免循环引用
};

int main() {
    auto node1 = std::make_shared<Node>();
    auto node2 = std::make_shared<Node>();
    node1->next = node2;
    node2->prev = node1; // 使用weak_ptr防止循环引用
    return 0;
}
```

